SELECT * FROM T_PROFESSOR; --16
SELECT * FROM T_DEPARTMENT; --12
SELECT 16 *12 FROM dual;

--ORACLE
SELECT p.NAME, p.DEPTNOM, d.DNAME FROM T_PROFESSOR p, T_DEPARTMENT d
WHERE p.DEPTNO = d.DEPTNO;

--ANSI
-- 등가조인, 이너조인
SELECT p.NAME, p.DEPTNO, d.DNAME FROM T_PROFESSOR p 
	JOIN T_DEPARTMENT d ON p.DEPTNO = d.DEPTNO;

SELECT * FROM T_CUSTOMER;

SELECT * FROM T_EMP2;
SELECT * FROM T_POST;
SELECT e.NAME 사원이름, e.POST 직급, e.PAY 급여, p.S_PAY 하한급여, p.E_PAY 상한급여
FROM T_EMP2 e, T_POST p WHERE e.POST = p.POST;

-- EMP, DEPT 테이블에서 사원번호, 사원이름, 부서지역 검색
SELECT * FROM T_EMP;
SELECT * FROM T_DEPT;
--ORACLE
SELECT e.EMPNO, e.ENAME, d.LOC FROM T_EMP e, T_DEPT d 
WHERE e.DEPTNO = d.DEPTNO;

--ANSI
SELECT e.EMPNO 사원번호, e.ENAME 사원이름, d.LOC 부서지역 FROM T_EMP e
	JOIN T_DEPT d ON e.DEPTNO = d.DEPTNO;

--NATURAL JOIN
SELECT * FROM T_EMP e
	JOIN T_DEPT d USING(DEPTNO);
SELECT * FROM T_EMP NATURAL JOIN T_DEPT;


-- PLAYER, TEAM 테이블에서 송종국 선수가 속한 팀의 전화번호 검색
--									CONCAT(CONCAT(t.DDD, '-'), t.TEL)
SELECT p.PLAYER_NAME 이름, t.TEAM_NAME 팀이름, t.DDD ||'-'|| t.TEL 전화번호
FROM PLAYER p
	JOIN TEAM t ON p.TEAM_ID = t.TEAM_ID
WHERE p.PLAYER_NAME = '송종국'


-- JOBS 테이블에서 JOB_ID로 EMAIL, 풀네임, JOB_TITLE 검색
SELECT * FROM JOBS;
SELECT * FROM EMPLOYEES;

SELECT e.EMAIL, e.FIRST_NAME ||' '|| e.LAST_NAME "FULL NAME", j.JOB_TITLE FROM JOBS j
	JOIN EMPLOYEES e ON j.JOB_ID = e.JOB_ID;


-- T_STUDENT, T_DEPARTMENT 테이블에서 학생이름, 1전공 학과번호, 1전공 학과 이름 검색
SELECT * FROM T_STUDENT;
SELECT * FROM T_DEPARTMENT;

SELECT s.NAME 학생이름, s.DEPTNO1 "1전공 학과번호", d.DNAME "1전공 학과 이름" FROM T_STUDENT s 
	JOIN T_DEPARTMENT d ON d.DEPTNO = s.DEPTNO1;
-- T_STUDENT, T_PROFESSOR 테이블에서 학생이름, 지도교수 번호, 지도교수 이름 검색
SELECT * FROM T_STUDENT;
SELECT * FROM T_PROFESSOR;

SELECT s.NAME 학생이름, s.PROFNO "지도교수 번호", p.NAME "지도교수 이름" FROM T_STUDENT s
	JOIN T_PROFESSOR p ON p.PROFNO = s.PROFNO;

-- OUTER JOIN
SELECT s.NAME 학생이름, s.PROFNO 지도교수번호, p.NAME 지도교수이름 FROM T_STUDENT s
	LEFT OUTER JOIN T_PROFESSOR p ON s.PROFNO=p.PROFNO;

SELECT s.NAME 학생이름, s.PROFNO 지도교수번호, p.NAME 지도교수이름 FROM T_STUDENT s
	RIGHT OUTER JOIN T_PROFESSOR p ON s.PROFNO=p.PROFNO
WHERE p.NAME = '허은';

SELECT s.STADIUM_NAME 구장명, t.TEAM_NAME 팀이름 FROM STADIUM s
	LEFT OUTER JOIN TEAM t ON s.HOMETEAM_ID = t.TEAM_ID;

SELECT * FROM STADIUM s
	FULL OUTER JOIN TEAM t ON s.HOMETEAM_ID = t.TEAM_ID;

-- EMP 테이블에서 사원의 이름과 그 사원의 매니져 이름을 함께 출력
-- SELF 조인
SELECT * FROM T_EMP;
SELECT e1.ENAME 사원이름, e2.ENAME 매니저이름 FROM T_EMP e1
	JOIN T_EMP e2 ON e1.MGR=e2.EMPNO;


-- CROSS 조인
-- 카티션 곱을 결과물로 돌려준다.
-- SELECT p.NAME, p.DEPTNO, d.DNAME FROM T_PROFESSOR p, T_DEPARTMENT d;
SELECT p.NAME, p.DEPTNO, d.DNAME FROM T_PROFESSOR p
	CROSS JOIN T_DEPARTMENT d;
	

-- T_DEPT2 테이블에서 부서명과 그 부서의 상위부서 출력
SELECT * FROM T_DEPT2;
SELECT d1.DNAME, d2.DNAME FROM T_DEPT2 d1
	JOIN T_DEPT2 d2 ON d1.PDEPT = d2.DCODE;

-- T_PROFESSOR 테이블에서 교수 번호, 교수이름, 입사일, 자기보다 입사일 빠른 사람의 인원수 출력
SELECT * FROM T_PROFESSOR;
SELECT p1.PROFNO 교수번호, p1.NAME 교수이름, p1.HIREDATE 입사일, COUNT(P2.HIREDATE) FROM T_PROFESSOR p1, T_PROFESSOR p2
	WHERE p1.HIREDATE > p2.HIREDATE
GROUP BY p1.PROFNO, p1.NAME, p1.HIREDATE;

SELECT p1.PROFNO 교수번호, p1.NAME 교수이름, p1.HIREDATE 입사일, COUNT(P2.HIREDATE) "입사일이 빠른 사람 수" FROM T_PROFESSOR p1 
	LEFT OUTER JOIN T_PROFESSOR p2 ON p1.HIREDATE > p2.HIREDATE
GROUP BY p1.PROFNO, p1.NAME, p1.HIREDATE;


-- T_CUSTOMER 테이블에서 각 고객의 포인트별로 받을 수 있는 상품을 조회 -> 이름, 포인트, 상품명 출력
SELECT * FROM T_CUSTOMER;
SELECT * FROM T_GIFT;

SELECT c.C_NAME, c.C_POINT, g.G_NAME FROM T_CUSTOMER c
	LEFT OUTER JOIN T_GIFT g ON g.G_END >= c.C_POINT AND g.G_START <= c.C_POINT;

-- 선생님 답
SELECT c.C_NAME, c.C_POINT, g.G_NAME FROM T_CUSTOMER c
	JOIN T_GIFT g ON c.C_POINT >= g.G_START AND c.C_POINT <= g.G_END;

-- 각 상품의 이름과 필요한 수량이 몇개인지
SELECT g.G_NAME, COUNT(g.G_NAME) FROM T_GIFT g
	JOIN T_CUSTOMER c ON g.G_END > c.C_POINT AND g.G_START <= c.C_POINT
GROUP BY g.G_NO, g.G_NAME, g.G_END, g.G_START;

-- 선생님 답
SELECT g.G_NAME, COUNT(c.C_NAME) FROM T_GIFT g
	JOIN T_CUSTOMER c ON c.C_POINT BETWEEN g.G_START AND g.G_END
GROUP BY g.G_NAME;


-- T_STUDENT 테이블과 T_EXAM01 그 학생의 이름, 점수, 학점
SELECT * FROM T_STUDENT;
SELECT * FROM T_EXAM01;
SELECT * FROM T_CREDIT;

SELECT s.NAME, e.TOTAL, c.GRADE FROM T_STUDENT s, T_EXAM01 e, T_CREDIT c
	WHERE c.MIN_POINT <= e.TOTAL AND c.MAX_POINT >= e.TOTAL AND e.STUDNO = s.STUDNO;

-- 선생님 답
SELECT s.NAME, e.TOTAL, c.GRADE FROM T_STUDENT s
	JOIN T_EXAM01 e ON s.STUDNO = e.STUDNO
	JOIN T_CREDIT c ON e.TOTAL BETWEEN c.MIN_POINT AND c.MAX_POINT;

-- T_CUSTOMER, T_GIFT를 참조해서 산악용 자전거를 선택할 수 있는 고객의 이름, 포인트 출력
SELECT * FROM T_GIFT;
SELECT * FROM T_CUSTOMER;

SELECT c.C_NAME 이름, c.C_POINT FROM T_CUSTOMER c, T_GIFT g
	WHERE g.G_END >= c.C_POINT AND g.G_START <= c.C_POINT AND G_NAME = '산악용자전거';
	
-- 선생님 답
SELECT c.C_NAME, c.C_POINT FROM T_CUSTOMER c
	JOIN T_GIFT g ON c.C_POINT >= g.G_START AND G_NAME = '산악용자전거';

-- WHERE 써도 되지만 데이터 수가 많아지면 오래걸리기 떄문에 JOIN ON으로 적는게 더 좋음.
/* SELECT c.C_NAME, c.C_POINT FROM T_CUSTOMER c
	JOIN T_GIFT g ON c.C_POINT >= g.G_START 
	WHERE G_NAME = '산악용자전거';
*/
