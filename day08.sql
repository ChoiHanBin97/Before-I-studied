-- PLAYER 테이블에서 왕선재 선수와 생일이 같은 선수들 검색하기 팀 아이디로 정렬하기
SELECT * FROM PLAYER;

SELECT * FROM PLAYER WHERE BIRTH_DATE =
	(SELECT BIRTH_DATE FROM PLAYER WHERE PLAYER_NAME = '왕선재')
ORDER BY TEAM_ID;
	
-- STADIUM 테이블에서 경기장 이름과 홈팀명, 좌석수, 경기장평균좌석 검색
SELECT * FROM STADIUM;
SELECT * FROM TEAM;

SELECT s.STADIUM_NAME, t.TEAM_NAME, s.SEAT_COUNT, 
	(SELECT ROUND(AVG(SEAT_COUNT)) FROM STADIUM)
FROM STADIUM s LEFT OUTER JOIN TEAM t ON s.HOMETEAM_ID = t.TEAM_ID;

-- PLAYER 테이블에서 정현수 선수가 속한 팀의 선수들 검색
-- WHERE절의 등호나 부등호 오른쪽에는 값이 한개만 와야함, 따라서 등호가 아닌 IN으로 비교를 해주어야 한다.
SELECT * FROM PLAYER WHERE TEAM_ID IN 
	(SELECT TEAM_ID FROM PLAYER WHERE PLAYER_NAME = '정현수');

--T_PROFESSOR 테이블에서 김영조 교수와 김영조 교수보다 입사일이 늦지만 급여가 높은 교수들의 PROFNO, NAME, PAY 검색
SELECT * FROM T_PROFESSOR;
SELECT PROFNO, NAME, PAY FROM T_PROFESSOR WHERE HIREDATE >=
	(SELECT HIREDATE FROM T_PROFESSOR WHERE NAME = '김영조') AND PAY >=
	(SELECT PAY FROM T_PROFESSOR WHERE NAME = '김영조')
	


-- 두 방식으로 할 수 있음
SELECT * FROM PLAYER WHERE TEAM_ID = 'K02' OD "POSITION" = 'GK' ORDER BY TEAM_ID;

-- UNION
-- 투 쿼리문의 결과를 합칠 떄 사용
-- 두 쿼리문의 컬럼 갯수가 동일해야한다.
-- 중복된 데이터들은 배제한 채 나옴
(SELECT * FROM PLAYER WHERE TEAM_ID = 'K02')
UNION 
(SELECT * FROM PLAYER WHERE "POSITION" = 'GK') ORDER BY 3;
-- ORDER BY 컬럼명은 불가능 -> 위치를 써줘야함


-- UNION ALL
-- 중복된 데이터들을 배제하지 않고 모두 나타낼 떄
(SELECT * FROM PLAYER WHERE TEAM_ID = 'K02')
UNION ALL
(SELECT * FROM PLAYER WHERE "POSITION" = 'GK') ORDER BY 3;


CREATE VIEW TESTVIEW(NAME, HEIGHT) AS (SELECT PLAYER_NAME, HEIGHT FROM PLAYER WHERE TEAM_ID 'K02');

CREATE TABLE TEST(
	testcol1 NUMBER(3),
	testcol2 VARCHAR2(20)
);
INSERT INTO TEST VALUES(1, 'A');
INSERT INTO TEST VALUES(2, 'B');
INSERT INTO TEST VALUES(3, 'C');
INSERT INTO TEST VALUES(4, 'D');
INSERT INTO TEST VALUES(5, 'E');
INSERT INTO TEST (SELECT 6, 'F' FROM DUAL);

CREATE TABLE TEST3 AS (SELECT * FROM TEST);
SELECT * FROM TEST3;

CREATE TABLE TEST2(
	testcol1 NUMBER(3),
	testcol2 VARCHAR2(20)
);

-- TEST2에다가 TEST, TEST3 내용 한번에 추가하기
INSERT INTO TEST2 (SELECT * FROM TEST UNION ALL SELECT * FROM TEST3);

-- PLAYER 테이블에서 팀별 최대 몸무게인 선수의 팀명, 지역명, 선수이름, 몸무게 검색
-- (TEAM_ID, WEIGHT) IN ('k05', 70)('k05', 80)('k07', 70)  ->  
SELECT * FROM PLAYER;
SELECT * FROM TEAM;

-- 시도
SELECT p.TEAM_ID, t.REGION_NAME, p.PLAYER_NAME, WEIGHT FROM PLAYER p, TEAM t
WHERE t.TEAM_ID = p.TEAM_ID;


-- 선생님
SELECT TEAM_ID, MAX(WEIGHT) FROM PLAYER GROUP BY TEAM_ID;

SELECT t.TEAM_NAME, t.REGION_NAME, p.PLAYER_NAME, p.WEIGHT FROM PLAYER p
	JOIN TEAM t ON t.TEAM_ID = p.TEAM_ID
WHERE (p.TEAM_ID, p.WEIGHT) IN (SELECT TEAM_ID, MAX(WEIGHT) FROM PLAYER GROUP BY TEAM_ID)


-- DEPT 테이블에서 LOC별 총급여, 평균급여, 전체 사원의 평균 급여
SELECT * FROM T_DEPT;
SELECT * FROM T_EMP;

SELECT d.LOC 지역, SUM(e.SAL) 총급여, AVG(e.SAL) 평균급여, (SELECT AVG(SAL) FROM T_EMP) "전체 사원 평균급여"
FROM T_EMP e
	JOIN T_DEPT d ON e.DEPTNO = d.DEPTNO
GROUP BY d.LOC;

-- EMP 테이블에서 FORD의 입사년도와 같은 사원 전체 정보 검색
SELECT SUBSTR(HIREDATE, 1, 2) FROM T_EMP;
SELECT * FROM T_EMP WHERE SUBSTR(HIREDATE, 1, 2) = 
(SELECT SUBSTR(HIREDATE, 1, 2) FROM T_EMP WHERE ENAME = 'FORD');

-- 선생님
SELECT * FROM T_EMP WHERE TO_CHAR(HIREDATE, 'YYYYMMDD') LIKE 
	(SELECT SUBSTR(TO_CHAR(HIREDATE, 'YYYYMMDD'), 1, 4) || '%' FROM T_EMP WHERE ENAME = 'FORD');

-- IN과 ANY의 같은 표현식
SELECT * FROM T_EMP WHERE SAL IN (1000, 1500, 2000);
SELECT * FROM T_EMP WHERE SAL = ANY(1000, 1500, 2000);
-- ANY 안에 있는 것 중 최소값보다 큰 값
SELECT * FROM T_EMP WHERE SAL > ANY(1000, 1500, 2000);
-- ALL 안에 있는 모든 것들 보다 큰 값
SELECT * FROM T_EMP WHERE SAL > ANY(1000, 1500, 2000);

-- 다음은 같은 식
SELECT * FROM T_EMP WHERE SAL >= ALL(SELECT SAL FROM T_EMP);
SELECT * FROM T_EMP WHERE SAL >= (SELECT MAX(SAL) FROM T_EMP);

-- 컬럼<>ANY() : 모든 것
-- 컬럼<>ANY() : 같지 않은 것 
SELECT DEPTNO FROM T_EMP WHERE DEPTNO <> ANY(SELECT DEPTNO FROM T_EMP WHERE ENAME = 'SMITH')

-- EXISTS
SELECT e.ENAME, d.DNAME FROM T_DEPT d, T_EMP e WHERE d.DEPTNO = e.DEPTNO;
SELECT d.DNAME FROM T_DEPT d WHERE EXISTS(SELECT 1 FROM T_EMP e WHERE e.DEPTNO = d.DEPTNO);

SELECT * FROM T_EMP WHERE SAL IN (SELECT SAL FROM T_EMP WHERE DEPTNO = 20);
SELECT * FROM T_EMP WHERE EXISTS (SELECT SAL FROM T_EMP WHERE DEPTNO = 20);
-- T_EMP2에서 과장 직급의 최소 연봉자보다 급여를 많이 받는 직원의 이름, 직급, 급여 검색
SELECT * FROM T_EMP2;
-- 첫번째 방법
SELECT NAME, POST, PAY FROM T_EMP2 WHERE PAY > (SELECT MIN(PAY) FROM T_EMP2 WHERE POST = '과장');
-- 두번째 방법
SELECT NAME, POST, TO_CHAR(PAY, '999,999,999') FROM T_EMP2 WHERE PAY > ANY(SELECT PAY FROM T_EMP2 WHERE POST = '과장');

-- T_STUDENT 테이블에서 4학년 중 최소 몸무게보다 몸무게가 덜 나가는 학생의 이름, 학년, 몸무게 검색
SELECT * FROM T_STUDENT;

SELECT NAME, GRADE, WEIGHT FROM T_STUDENT WHERE WEIGHT < 
	(SELECT MIN(WEIGHT) FROM T_STUDENT WHERE GRADE = 4);

SELECT NAME, GRADE, WEIGHT FROM T_STUDENT WHERE WEIGHT <
	ALL(SELECT WEIGHT FROM T_STUDENT WHERE GRADE = 4);
	

CREATE TABLE TEST_A(
	TESTCOL1 NUMBER(3),
	TESTCOL2 VARCHAR2(20)
);

INSERT ALL 
	INTO TEST VALUES(10, 'ASDF')
	INTO TEST VALUES(10, 'QWER')
	INTO TEST2 VALUES(10, 'ASDF')
	INTO TEST2 VALUES(10, 'QWER')
SELECT * FROM DUAL;

-- 자신의 지급의 평균급여보다 같거나 많이 받는 직원의 이름, 직급, 급여 검색
SELECT t1.NAME, t1.POST, t1.PAY FROM T_EMP2 t1 WHERE t1.PAY >= 
	(SELECT AVG(PAY) FROM T_EMP2 t2 WHERE t1.POST = t2.POST);
	
-- 학과별 입사일이 가장 오래된 교수의 교수번호, 이름, 학과명 검색
SELECT * FROM T_PROFESSOR;
SELECT DEPTNO, MIN(HIREDATE) FROM T_PROFESSOR GROUP BY DEPTNO;

SELECT p.PROFNO "교수 번호", p.NAME "교수 이름", d.DNAME "학과명" FROM T_PROFESSOR p 
	JOIN T_DEPARTMENT d ON p.DEPTNO = d.DEPTNO
WHERE (p.DEPTNO, p.HIREDATE) IN 
	(SELECT DEPTNO, MIN(HIREDATE) FROM T_PROFESSOR GROUP BY DEPTNO)
ORDER BY p.PROFNO;