별칭
	컬럼명을 바꿀 때, 테이블을 두 개 이상 참조할 때 
	각 테이블에 지어주는 경우
	SELECT절에서의 별칭 : AS 뒤에 또는 한 칸 띄우고 작성
	FROM절에서의 별칭 : 테이블 뒤에 한 칸 띄우고 작성

.(하위연산자)
	A.b : A의 b, A 안의 b 라는 뜻

연결(CONCATENATION)
	문자열을 연결할 때는 ||를 사용한다.

BETWEEN ~ AND
	BETWEEN A AND B : A 이상 B 이하

LIKE
	뒤에 오는 와일드 카드 문자열과 같다면 참, 다르다면 거짓

와일드카드
	_  : 한 글자
		EX) '_다솔' : 성은 상관없이 이름이 '다솔'이면 참
	% : 모든 것
		EX) '정%' : 이름은 상관없이 성이 '정'이면 참
	
	'%A' : 글자 수에 상관 없이 끝이 'A'이면 참
	'_A' : 두 글자 중에 끝이 'A'면 참 

CASE문
	CASE
	 	WHEN 조건식1 THEN 값1
	 	WHEN 조건식2 THEN 값2
		...
		 ELSE 값
	END
	
	조건식1이 참이면 값, 조건식2가 참이면 값2, ...
	조건식이 전부 거짓이면 ELSE 뒤의 값

정규화(Normalization)
	삽입, 수정, 삭제 시 발생할 수 있는 이상현상을 줄이는 과정(제거)
	데이터의 중복을 최소화
	대부분 3차 정규화까지만 진행한다

정규형(Normal Form)
	정규화를 마친 데이터

주문 테이블
	이름	나이	우편번호	주소	상품명	상품가격
	최한빈	24	1000	가현리	바지, 양말 1000, 500
	이순신	20	1001	사당동	거북선	 2000
	이용현	30	1002	안산시	갤럭시20	 3000




1차 정규화(1NF)
	하나의 컬럼에는 값이 1개씩만 있어야 한다.
	반복적인 컬럼값이 나타나는 경우에는 그 값의 활용이 어려워진다.

주문 테이블
	이름	나이	우편번호	주소	상품명	상품가격
	최한빈	24	1000	가현리	바지	 1000
	최한빈	24	1000	가현리	양말 	 500
	이순신	20	1001	사당동	거북선	 2000
	이용현	30	1002	안산시	갤럭시20	 3000

2차 정규화(2NF)
	테이블의 모든 컬럼이 서로 관계가 있어야 한다.
	관계가 없는 컬럼들이 존재한다면 테이블을 나누어 준다.


유저 테이블
	이름	나이	우편번호	주소
	최한빈	24	1000	가현리
	이순신	20	1001	사당동
	이용현	30	1002	안산시

상품 테이블
	상품명	상품가격
	바지	1000
	양말	500
	거북선	2000
	갤럭시20	3000


3차 정규화(3NF)
	하나의 컬럼은 그 외의 다른 컬럼을 결정할 수 없다.

유저 테이블
	이름	나이	우편번호	구	동
	최한빈	24	1000	강남구	역삼1동
	이순신	20	1001	동작구	사당동
	이용현	30	1002	상록구	사동
	홍길동	40	1003	강남구	역삼2동

	우편번호로 구, 동 등을 알 수 있다. (우편번호가 구와 동을 결정한다.)
	중복된 데이터가 생길 가능성이 있으므로 3차 정규화를 해준다.

유저 테이블
	이름	나이	우편번호
	최한빈	24	1000
	이순신	20	1001
	이용현	30	1002
	홍길동	40	1003

우편번호 테이블
	우편번호	구	동
	1000	강남구	역삼1동
	1001	동작구	사당동
	1002	상록구	사동
	1003	강남구	역삼2동

반정규화
	활용하는 단계에서 정규화를 진행하지 않는게 더 편리하다면 반(반대)정규화를 거친다.

