SELECT * FROM T_PROFESSOR;

SELECT PROFNO 교수번호, NAME 이름, PAY 급여, (SELECT AVG(PAY) FROM T_PROFESSOR) 평균급여
FROM T_PROFESSOR;


-- PLAYER 테이블에 TEAM_ID = 'K01'인 선수 중에 POSITION이 'GK'인 선수
SELECT * FROM PLAYER WHERE TEAM_ID = 'K01' AND "POSITION" = 'GK';

SELECT * FROM 
	(SELECT * FROM PLAYER WHERE TEAM_ID = 'K01')
WHERE "POSITION"='GK';

-- 1번째는 FK가 존재, 2번째는 새로운 테이블을 가지고 뽑은 것이기 때문에 FK가 부재

-- PLAYER 테이블에서 평균키보다 키가 작은 선수 검색
SELECT * FROM PLAYER WHERE HEIGHT <
 	(SELECT AVG(HEIGHT) FROM PLAYER);

-- PLAYER 테이블에서 전체 키 평균과 포지션별 평균키 구하기
SELECT "POSITION" 포지션, AVG(HEIGHT) 포지션별 평균키, 
	(SELECT AVG(HEIGHT) FROM PLAYER) "전체 평균키" 
FROM PLAYER WHERE "POSITION" IS NOT NULL GROUP BY "POSITION"; 

-- PLAYER 테이블에서 NICKNAME이 NULL인 선수들은 정태민 선수의 닉네임으로 바꾸기
SELECT NICKNAME FROM PLAYER WHERE PLAYER_NAME = '정태민'

UPDATE PLAYER
SET NICKNAME = (SELECT NICKNAME FROM PLAYER WHERE PLAYER_NAME = '정태민')
WHERE NICKNAME IS NULL;

-- EMPLOYEES 테이블에서 평균급여보다 낮은 사람들의 급여를 10% 인상하기
SELECT SALARY FROM EMPLOYEES WHERE SALARY < (SELECT AVG(SALARY) FROM EMPLOYEES);

UPDATE EMPLOYEES
SET SALARY = SALARY * 1.1
WHERE SALARY < (SELECT AVG(SALARY) FROM EMPLOYEES);

-- PLAYER 테이블에서 평균키보다 큰 선수들 삭제
SELECT HEIGHT FROM PLAYER WHERE HEIGHT < (SELECT AVG(HEIGHT) FROM PLAYER); 

DELETE FROM PLAYER
WHERE HEIGHT > (SELECT AVG(HEIGHT) FROM PLAYER);

-- 정남일 선수가 속한 팀의 선수들 검색(PLAYER)
SELECT PLAYER_NAME FROM PLAYER 
WHERE TEAM_ID = 
	(SELECT TEAM_ID FROM PLAYER WHERE PLAYER_NAME = '정남길');


-- 축구선수들 중에서 키는 평균보다 작고, 몸무게는 평균보다 높은 사람 검색
SELECT PLAYER_NAME FROM PLAYER WHERE HEIGHT <
	(SELECT AVG(HEIGHT) FROM PLAYER) AND WEIGHT >
	(SELECT AVG(WEIGHT) FROM PLAYER);

SELECT * FROM 
	(SELECT * FROM PLAYER WHERE WEIGHT > (SELECT AVG(WEIGHT) FROM PLAYER))
WHERE HEIGHT < (SELECT AVG(HEIGHT) FROM PLAYER);


-- EMP 테이블에서 이름에 L이 있는 사원들의 DNAME과 LOC 검색
SELECT * FROM T_DEPT;
SELECT * FROM T_EMP;
SELECT DEPTNO FROM T_EMP WHERE ENAME LIKE ('%L%')

-- 내가 한 거	
SELECT DNAME, LOC FROM T_DEPT WHERE DEPTNO IN
	(SELECT DEPTNO FROM T_EMP WHERE ENAME LIKE ('%L%'));

-- JOIN을 활용한 방식
SELECT * FROM T_DEPT d
	JOIN T_EMP e ON e.DEPTNO = d.DEPTNO
WHERE e.ENAME LIKE '%L%';

-- 선생님이 한거 2
SELECT a.*, DNAME, LOC FROM T_DEPT d
	JOIN (SELECT * FROM T_EMP WHERE ENAME LIKE '%L%') a ON d.DEPTNO = a.DEPTNO;

-- 이윤나 학생이 속한 과 조교수의 급여보다 급여를 더 받는 교수들 검색
SELECT * FROM T_PROFESSOR;
SELECT * FROM T_STUDENT;
SELECT * FROM T_DEPARTMENT;
SELECT DEPTNO1 FROM T_STUDENT WHERE NAME = '이윤나';
SELECT PROFNO FROM T_PROFESSOR WHERE DEPTNO = 
	(SELECT DEPTNO1 FROM T_STUDENT WHERE NAME = '이윤나') AND "POSITION" = '조교수';


SELECT * FROM T_PROFESSOR WHERE PAY >
	(SELECT PAY FROM T_PROFESSOR WHERE DEPTNO = 
		(SELECT DEPTNO1 FROM T_STUDENT WHERE NAME = '이윤나') AND "POSITION" = '조교수')

-- 각 팀별로 김장관 선수보다 늦게 태어난 선수의 수 검색
SELECT TEAM_ID, COUNT(*) FROM PLAYER WHERE 
BIRTH_DATE > (SELECT BIRTH_DATE FROM PLAYER WHERE PLAYER_NAME = '김장관')
GROUP BY TEAM_ID;


-- JOB TITLE 중 Manager라는 문자열이 포함된 직원들의 평균 연봉을 JOB TITLE 별로 검색
SELECT JOB_TITLE, JOB_ID FROM JOBS WHERE JOB_TITLE LIKE '%Manager%';
SELECT * FROM EMPLOYEES;

-- 시도 1
SELECT JOB_TITLE, JOB_ID, 
	(SELECT AVG(e.SALARY) FROM EMPLOYEES e, JOBS j WHERE j.JOB_TITLE LIKE '%Manager%')
FROM JOBS WHERE JOB_TITLE LIKE '%Manager%';

-- 시도 2
SELECT j.JOB_TITLE, AVG(e.SALARY) FROM EMPLOYEES e, JOBS j
WHERE j.JOB_ID IN (SELECT JOB_ID FROM JOBS WHERE JOB_TITLE LIKE '%Manager%')
AND e.JOB_ID = j.JOB_ID
GROUP BY j.JOB_TITLE;
-- AND로 조건을 안해준다면 WHERE에서 걸러낸 것을 SELECT하지 않고, 모두 합쳐짐

-- JOIN으로 묶기
SELECT j.JOB_TITLE, AVG(e.SALARY) FROM EMPLOYEES e JOIN
	JOBS j ON e.JOB_ID = j.JOB_ID
WHERE e.JOB_ID IN (SELECT JOB_ID FROM JOBS WHERE JOB_TITLE LIKE '%Manager')
GROUP BY j.JOB_TITLE;

-- 축구선수들 중 각 팀별로 키가 가장 큰 선수들 검색(선수들의 정보까지 전부 나오게 검색)
SELECT * FROM PLAYER p JOIN
	(SELECT TEAM_ID, MAX(HEIGHT) MHEIGHT FROM PLAYER GROUP BY TEAM_ID) a 
ON p.TEAM_ID = a.TEAM_ID AND p.HEIGHT = a.MHEIGHT
ORDER BY p.TEAM_ID;
-- ORDER BY 1 : 첫번째 컬럼 기준으로 정렬

-- 경기장 중 경기 일정이 20120501 ~ 20120503 사이에 있는 경기장 검색
SELECT * FROM SCHEDULE;
SELECT * FROM STADIUM;

SELECT * FROM STADIUM
WHERE STADIUM_ID IN 
	(SELECT STADIUM_ID FROM SCHEDULE WHERE SCHE_DATE BETWEEN '20120501' AND '20120503');

-- PLAYER 테이블에서 생일이 NULL인 선수들은 정준 선수의 생일로 바꾸기
SELECT * FROM PLAYER;
SELECT PLAYER_NAME, BIRTH_DATE FROM PLAYER WHERE BIRTH_DATE IS NULL;

UPDATE PLAYER
SET BIRTH_DATE = (SELECT BIRTH_DATE FROM PLAYER WHERE PLAYER_NAME = '정준')
WHERE BIRTH_DATE IS NULL;

-- PLAYER 테이블에서 왕선재 선수와 생일이 같은 선수들 검색하기
SELECT * FROM PLAYER
WHERE BIRTH_DATE = (SELECT BIRTH_DATE FROM PLAYER WHERE PLAYER_NAME = '왕선재');

-- EMPLOYEES 테이블에서 Den의 전화번호와 앞 3자리가 같은 사원들 검색
SELECT * FROM EMPLOYEES;

SELECT SUBSTR(PHONE_NUMBER, 1, 3) FROM EMPLOYEES WHERE FIRST_NAME = 'Den'

-- 내가 한 것
SELECT * FROM EMPLOYEES
WHERE SUBSTR(PHONE_NUMBER, -LENGTH(PHONE_NUMBER), 3) =  
(SELECT SUBSTR(PHONE_NUMBER, -LENGTH(PHONE_NUMBER), 3) FROM EMPLOYEES WHERE FIRST_NAME = 'Den') 
;

-- 선생님 한 것
SELECT * FROM EMPLOYEES WHERE PHONE_NUMBER LIKE 
	(SELECT SUBSTR(PHONE_NUMBER, 1, 3) FROM EMPLOYEES WHERE FIRST_NAME = 'Den') || '%'
